/*
 * This file is generated by jOOQ.
 */
package jhi.seams.server.database.codegen.tables.records;


import jhi.seams.server.database.codegen.tables.MeasurementComponents;
import org.jooq.*;
import org.jooq.impl.UpdatableRecordImpl;

import javax.annotation.Generated;
import java.sql.Timestamp;


// @formatter:off
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MeasurementComponentsRecord extends UpdatableRecordImpl<MeasurementComponentsRecord> implements Record4<Integer, Integer, Timestamp, Timestamp> {

    private static final long serialVersionUID = 2097942608;

    /**
     * Setter for <code>seams_db.measurement_components.measurement_id</code>.
     */
    public void setMeasurementId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>seams_db.measurement_components.measurement_id</code>.
     */
    public Integer getMeasurementId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>seams_db.measurement_components.component_id</code>.
     */
    public void setComponentId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>seams_db.measurement_components.component_id</code>.
     */
    public Integer getComponentId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>seams_db.measurement_components.created_on</code>.
     */
    public void setCreatedOn(Timestamp value) {
        set(2, value);
    }

    /**
     * Getter for <code>seams_db.measurement_components.created_on</code>.
     */
    public Timestamp getCreatedOn() {
        return (Timestamp) get(2);
    }

    /**
     * Setter for <code>seams_db.measurement_components.updated_on</code>.
     */
    public void setUpdatedOn(Timestamp value) {
        set(3, value);
    }

    /**
     * Getter for <code>seams_db.measurement_components.updated_on</code>.
     */
    public Timestamp getUpdatedOn() {
        return (Timestamp) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record2<Integer, Integer> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, Integer, Timestamp, Timestamp> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, Integer, Timestamp, Timestamp> valuesRow() {
        return (Row4) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return MeasurementComponents.MEASUREMENT_COMPONENTS.MEASUREMENT_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field2() {
        return MeasurementComponents.MEASUREMENT_COMPONENTS.COMPONENT_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Timestamp> field3() {
        return MeasurementComponents.MEASUREMENT_COMPONENTS.CREATED_ON;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Timestamp> field4() {
        return MeasurementComponents.MEASUREMENT_COMPONENTS.UPDATED_ON;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component1() {
        return getMeasurementId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component2() {
        return getComponentId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp component3() {
        return getCreatedOn();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp component4() {
        return getUpdatedOn();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getMeasurementId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value2() {
        return getComponentId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp value3() {
        return getCreatedOn();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp value4() {
        return getUpdatedOn();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MeasurementComponentsRecord value1(Integer value) {
        setMeasurementId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MeasurementComponentsRecord value2(Integer value) {
        setComponentId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MeasurementComponentsRecord value3(Timestamp value) {
        setCreatedOn(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MeasurementComponentsRecord value4(Timestamp value) {
        setUpdatedOn(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MeasurementComponentsRecord values(Integer value1, Integer value2, Timestamp value3, Timestamp value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached MeasurementComponentsRecord
     */
    public MeasurementComponentsRecord() {
        super(MeasurementComponents.MEASUREMENT_COMPONENTS);
    }

    /**
     * Create a detached, initialised MeasurementComponentsRecord
     */
    public MeasurementComponentsRecord(Integer measurementId, Integer componentId, Timestamp createdOn, Timestamp updatedOn) {
        super(MeasurementComponents.MEASUREMENT_COMPONENTS);

        set(0, measurementId);
        set(1, componentId);
        set(2, createdOn);
        set(3, updatedOn);
    }
// @formatter:on
}
